import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from bot.handlers.start.subscriptions import check_subscriptions
from bot.core.config import SUBSCRIPTION_CHANNEL_ID, SUBSCRIPTION_GROUP_ID, SUPPORT_TELEGRAM
from bot.handlers.start.messages import welcome_message, format_user_profile
from bot.handlers.start.keyboards import main_menu_keyboard, profile_keyboard, price_list_keyboard
from bot.handlers.cart.models import async_get_or_create_user, async_get_cart_quantity

router = Router()
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.info(
    "–ó–∞–≥—Ä—É–∂–µ–Ω start/callbacks.py –≤–µ—Ä—Å–∏–∏ 2025-04-27 —Å async_get_or_create_user")


@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    user, _ = await async_get_or_create_user(
        tg_id=user_id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        username=callback.from_user.username,
        language_code=callback.from_user.language_code
    )
    has_cart = (await async_get_cart_quantity(user)) > 0
    welcome_text = welcome_message(callback.from_user.first_name, has_cart)

    try:
        await callback.message.edit_text(
            welcome_text,
            reply_markup=await main_menu_keyboard(callback.bot, user_id),
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.message.delete()
        await callback.message.answer(
            welcome_text,
            reply_markup=await main_menu_keyboard(callback.bot, user_id),
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    await callback.answer()


@router.callback_query(F.data.startswith("locked_"))
async def handle_locked_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."""
    user_id = callback.from_user.id
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É: {callback.data}")

    _, message_text = await check_subscriptions(callback.bot, user_id)
    if not message_text:
        message_text = "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é."

    try:
        await callback.message.edit_text(
            message_text,
            disable_web_page_preview=True,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                              [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
        )
    except TelegramBadRequest:
        await callback.message.answer(
            message_text,
            disable_web_page_preview=True,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                              [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
        )
    await callback.answer()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
        subscription_result, message_text = await check_subscriptions(callback.bot, user_id, "profile")
        if not subscription_result:
            try:
                await callback.message.edit_text(
                    message_text,
                    disable_web_page_preview=True,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                      [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
                )
            except TelegramBadRequest:
                await callback.message.answer(
                    message_text,
                    disable_web_page_preview=True,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                      [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
                )
            await callback.answer()
            return

    user, _ = await async_get_or_create_user(
        tg_id=user_id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        username=callback.from_user.username,
        language_code=callback.from_user.language_code
    )
    text = await format_user_profile(user)
    keyboard = await profile_keyboard(user)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("price_list_"))
async def show_price_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
        subscription_result, message_text = await check_subscriptions(callback.bot, user_id, "price_list")
        if not subscription_result:
            try:
                await callback.message.edit_text(
                    message_text,
                    disable_web_page_preview=True,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                      [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
                )
            except TelegramBadRequest:
                await callback.message.answer(
                    message_text,
                    disable_web_page_preview=True,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                      [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]])
                )
            await callback.answer()
            return

    page = int(callback.data.split("_")[-1])
    user, _ = await async_get_or_create_user(
        tg_id=user_id,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        username=callback.from_user.username,
        language_code=callback.from_user.language_code
    )
    from .messages import get_price_list
    price_list_text, total_pages = await get_price_list(page)

    try:
        await callback.message.edit_text(
            price_list_text,
            reply_markup=await price_list_keyboard(user, page, total_pages),
            parse_mode="Markdown"
        )
    except TelegramBadRequest:
        await callback.message.answer(
            price_list_text,
            reply_markup=await price_list_keyboard(user, page, total_pages),
            parse_mode="Markdown"
        )
    await callback.answer()


@router.callback_query(F.data == "about")
async def show_about(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ '–û –±–æ—Ç–µ' —á–µ—Ä–µ–∑ callback."""
    user_id = callback.from_user.id
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '–û –±–æ—Ç–µ' —á–µ—Ä–µ–∑ callback.")

    text = (
        "‚ÑπÔ∏è –û –Ω–∞—Å\n\n"
        "–ú—ã - –≤–∞—à –ª—é–±–∏–º—ã–π –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ!\n\n"
        f"üì© –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_TELEGRAM}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

    try:
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ '–û –±–æ—Ç–µ': {e}")
        await callback.message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await callback.answer()
