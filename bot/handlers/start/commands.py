import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.handlers.start.messages import welcome_message, format_user_profile
from bot.handlers.start.keyboards import main_menu_keyboard, profile_keyboard
from bot.handlers.start.subscriptions import check_subscriptions
from bot.core.config import SUBSCRIPTION_CHANNEL_ID, SUBSCRIPTION_GROUP_ID, SUPPORT_TELEGRAM
from bot.handlers.cart.models import async_get_or_create_user, async_get_cart_quantity

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "/start")
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    user_data = message.from_user
    user, _ = await async_get_or_create_user(
        tg_id=user_data.id,
        first_name=user_data.first_name,
        last_name=user_data.last_name,
        username=user_data.username,
        language_code=user_data.language_code
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è)
    subscription_message = ""
    if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
        subscription_result, message_text = await check_subscriptions(message.bot, user_id)
        if not subscription_result:
            subscription_message = (
                f"{message_text}\n\n"
                "‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É, –∫–æ—Ä–∑–∏–Ω–µ –∏ –ø—Ä–æ—Ñ–∏–ª—é.\n"
                "–ö–æ–º–∞–Ω–¥—ã /faq –∏ /about –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    try:
        has_cart = (await async_get_cart_quantity(user)) > 0
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        has_cart = False

    welcome_text = welcome_message(user_data.first_name, has_cart)
    if subscription_message:
        welcome_text += f"\n{subscription_message}"

    try:
        await message.answer(
            welcome_text,
            reply_markup=await main_menu_keyboard(message.bot, user_id),
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    except TelegramBadRequest as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(
            welcome_text,
            reply_markup=await main_menu_keyboard(message.bot, user_id),
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")


@router.message(F.text == "/profile")
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
        subscription_result, message_text = await check_subscriptions(message.bot, user_id, "/profile")
        if not subscription_result:
            await message.answer(
                message_text,
                disable_web_page_preview=True,
                parse_mode="Markdown"
            )
            return

    user, _ = await async_get_or_create_user(
        tg_id=user_id,
        first_name=message.from_user.first_name
    )

    text = await format_user_profile(user)
    keyboard = await profile_keyboard(user)

    try:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.message(F.text == "/about")
async def about_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /about –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    text = (
        "‚ÑπÔ∏è –û –Ω–∞—Å\n\n"
        "–ú—ã - –≤–∞—à –ª—é–±–∏–º—ã–π –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ!\n\n"
        f"üì© –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_TELEGRAM}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

    try:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /about –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
