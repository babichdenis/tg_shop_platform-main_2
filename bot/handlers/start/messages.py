from asgiref.sync import sync_to_async
from django_app.shop.models import TelegramUser, Order, Product, Category

ITEMS_PER_PAGE = 10

@sync_to_async
def get_user_info(user: TelegramUser) -> str:
    return (
        f"๐ค ะะผั: {user.first_name or 'ะะต ัะบะฐะทะฐะฝะพ'}\n"
        f"ะคะฐะผะธะปะธั: {user.last_name or 'ะะต ัะบะฐะทะฐะฝะฐ'}\n"
        f"Username: @{user.username if user.username else 'ะะต ัะบะฐะทะฐะฝ'}\n"
        f"ะฏะทัะบ: {user.language_code or 'ะะต ัะบะฐะทะฐะฝ'}\n"
        f"ID: {user.telegram_id}"
    )

@sync_to_async
def get_user_orders(user: TelegramUser, limit: int = 5) -> list[Order]:
    return list(Order.objects.filter(user=user, is_active=True).order_by('-created_at')[:limit])

@sync_to_async
def get_pending_orders(user: TelegramUser) -> list[Order]:
    return list(Order.objects.filter(
        user=user,
        is_active=True,
        status__in=['ะะถะธะดะฐะตั ะพะฟะปะฐัั', 'ะะฟะปะฐัะตะฝ', 'ะ ะดะพััะฐะฒะบะต']
    ).order_by('-created_at'))

@sync_to_async
def get_price_list(page: int) -> tuple[str, int]:
    products = Product.objects.filter(is_active=True).order_by('category__name', 'name')
    total_products = products.count()
    total_pages = (total_products + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    products_on_page = products[start:end]

    text = "๐ ะัะฐะนั-ะปะธัั\n\n"
    current_category = None
    for product in products_on_page:
        if product.category != current_category:
            current_category = product.category
            text += f"**{current_category.name}**\n"
        text += f"โข {product.name} โ {product.price} โฝ\n"
    if not products_on_page:
        text += "ะขะพะฒะฐัะพะฒ ะฟะพะบะฐ ะฝะตั.\n"
    return text, total_pages

async def format_user_profile(user: TelegramUser) -> str:
    """ะคะพัะผะธัะพะฒะฐะฝะธะต ัะตะบััะฐ ะฟัะพัะธะปั"""
    user_info = await get_user_info(user)
    orders = await get_user_orders(user)
    pending_orders = await get_pending_orders(user)

    text = f"๐ค ะัะพัะธะปั\n\n{user_info}\n\n"
    if pending_orders:
        text += "๐ฌ ะขะตะบััะธะต ะทะฐะบะฐะทั (ะฝะต ะดะพััะฐะฒะปะตะฝั):\n\n"
        for order in pending_orders:
            text += (
                f"ะะฐะบะฐะท #{order.id} ะพั {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"ะกัะผะผะฐ: {order.total} โฝ\n"
                f"ะกัะฐััั: {order.get_status_display()}\n"
                f"ะะดัะตั: {order.address}\n\n"
            )
    else:
        text += "๐ฌ ะะตั ัะตะบััะธั ะทะฐะบะฐะทะพะฒ.\n\n"

    if not orders:
        text += "๐ฆ ะะฐะบะฐะทะพะฒ ะฟะพะบะฐ ะฝะตั. ะะฐะณะปัะฝะธ ะฒ ะบะฐัะฐะปะพะณ!"
    else:
        text += "๐ฆ ะะพัะปะตะดะฝะธะต ะทะฐะบะฐะทั:\n\n"
        for order in orders:
            text += (
                f"ะะฐะบะฐะท #{order.id} ะพั {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"ะกัะผะผะฐ: {order.total} โฝ\n"
                f"ะกัะฐััั: {order.get_status_display()}\n"
                f"ะะดัะตั: {order.address}\n\n"
            )
    return text

def welcome_message(user_name: str, has_cart: bool = False) -> str:
    """ะัะธะฒะตัััะฒะตะฝะฝะพะต ัะพะพะฑัะตะฝะธะต"""
    return (
        f"๐ ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั, {user_name}!\n\n"
        "ะั ัะฐะดั ะฒะธะดะตัั ะฒะฐั ะฒ ะฝะฐัะตะผ ะผะฐะณะฐะทะธะฝะต! ๐๏ธ\n"
        "ะัะฑะตัะธัะต ะดะตะนััะฒะธะต ะฒ ะผะตะฝั ะฝะธะถะต:\n\n"
        "๐น ะะฐัะฐะปะพะณ\n"
        "๐น ะัะฐะนั-ะปะธัั\n"
        "๐น ะัะพัะธะปั\n"
        "๐น FAQ\n"
        "๐น ะะพัะทะธะฝะฐ\n"
    )
