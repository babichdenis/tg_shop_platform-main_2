import logging
from typing import Dict, Tuple
from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from .models import get_product_by_id, get_or_create_cart, update_cart_item
from .utils import generate_back_data, generate_product_text, handle_photo_message, handle_text_message
from .keyboards import product_detail_keyboard
from bot.core.utils import get_or_create_user
from bot.handlers.cart.models import async_get_cart_quantity, async_get_cart_total, async_get_cart_items

logger = logging.getLogger(__name__)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω product/handlers.py –≤–µ—Ä—Å–∏–∏ 2025-04-23-7")

router = Router()
quantity_storage: Dict[Tuple[int, int], int] = {}


async def get_cart_quantity_for_product(user, product_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    try:
        items = await async_get_cart_items(user)
        for item in items:
            if item.product.id == product_id and item.is_active:
                return item.quantity
        return 0
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return 0


@router.callback_query(F.data.startswith("product_"))
async def show_product_detail(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞."""
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}.")

    try:
        product = await get_product_by_id(product_id)
        user, _ = await get_or_create_user(user_id=user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_quantity_for_product = await get_cart_quantity_for_product(user, product_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º quantity_storage —Å 1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
        key = (user_id, product_id)
        if key not in quantity_storage:
            quantity_storage[key] = 1

        try:
            cart_quantity = await async_get_cart_quantity(user)
            cart_total = await async_get_cart_total(user)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
            cart_quantity = 0
            cart_total = 0

        back_data = await generate_back_data(product)
        text = await generate_product_text(product)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤ —Ç–µ–∫—Å—Ç
        text += f"\n\nüõí –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_quantity_for_product} —à—Ç."

        if product.photo:
            await handle_photo_message(callback, product, text, back_data, cart_total, cart_quantity)
        else:
            await handle_text_message(callback, product, text, back_data, quantity=1, cart_total=cart_total, cart_quantity=cart_quantity)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("inc:"))
async def increase_quantity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    key = (user_id, product_id)
    current = quantity_storage.get(key, 1)
    quantity_storage[key] = current + 1
    logger.debug(
        f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –¥–æ {quantity_storage[key]}.")
    await update_product_message(callback, product_id)


@router.callback_query(F.data.startswith("dec:"))
async def decrease_quantity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    key = (user_id, product_id)
    current = quantity_storage.get(key, 1)
    if current > 1:  # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 1
        quantity_storage[key] = current - 1
        logger.debug(
            f"–£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –¥–æ {quantity_storage[key]}.")
    await update_product_message(callback, product_id)


@router.callback_query(F.data.startswith("add:"))
async def add_to_cart_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    _, product_id, quantity = callback.data.split(":")
    product_id = int(product_id)
    quantity = int(quantity)
    user_id = callback.from_user.id
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç ID {product_id} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}.")

    try:
        product = await get_product_by_id(product_id)
        user, _ = await get_or_create_user(user_id=user_id)
        cart, _ = await get_or_create_cart(user)
        item = await update_cart_item(cart, product, quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        key = (user_id, product_id)
        quantity_storage[key] = 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 1 –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product.name} √ó {quantity}", show_alert=True)
        try:
            cart_quantity = await async_get_cart_quantity(user)
            cart_total = await async_get_cart_total(user)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
            cart_quantity = 0
            cart_total = 0

        await update_product_message(
            callback,
            product_id,
            reset_quantity=False,
            cart_total=cart_total,
            cart_quantity=cart_quantity
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID {product_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)


async def update_product_message(
    callback: CallbackQuery,
    product_id: int,
    reset_quantity: bool = False,
    cart_total: float = 0,
    cart_quantity: int = 0
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    user_id = callback.from_user.id
    try:
        product = await get_product_by_id(product_id)
        back_data = await generate_back_data(product)
        key = (user_id, product_id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        user, _ = await get_or_create_user(user_id=user_id)
        cart_quantity_for_product = await get_cart_quantity_for_product(user, product_id)

        if reset_quantity:
            quantity = 1
            quantity_storage[key] = 1
        else:
            quantity = quantity_storage.get(key, 1)

        if not cart_total and not cart_quantity:
            try:
                cart_quantity = await async_get_cart_quantity(user)
                cart_total = await async_get_cart_total(user)
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                cart_quantity = 0
                cart_total = 0

        text = await generate_product_text(product)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –≤ —Ç–µ–∫—Å—Ç
        text += f"\n\nüõí –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_quantity_for_product} —à—Ç."

        markup = product_detail_keyboard(
            product_id=product.id,
            quantity=quantity,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_total=cart_total,
            cart_quantity=cart_quantity,
            back_data=back_data
        )

        try:
            if product.photo:
                await callback.message.edit_caption(caption=text, reply_markup=markup)
            else:
                await callback.message.edit_text(text=text, reply_markup=markup)
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                raise

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
