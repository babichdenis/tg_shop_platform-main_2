import logging
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.markdown import hbold, hitalic
from django_app.shop.models import Product
from asgiref.sync import sync_to_async
from bot.core.config import PRICE_DECIMAL_PLACES

logger = logging.getLogger(__name__)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω product/utils.py –≤–µ—Ä—Å–∏–∏ 2025-04-23-10")


@sync_to_async
def get_product_category(product):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
    return product.category


@sync_to_async
def get_category_parent_id(category):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    if category:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID {category.id}")
        return category.parent.id if category.parent else None
    logger.debug("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    return None


@sync_to_async
def get_category_path(category):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    path = []
    current = category
    while current:
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current.name} –≤ –ø—É—Ç—å")
        path.append(current.name)
        current = current.parent
    return path


async def generate_back_data(product: Product) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    try:
        logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è back_data –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
        category = await get_product_category(product)
        if category:
            parent_id = await get_category_parent_id(category)
            if parent_id:
                callback_data = f"cat_page_{parent_id}_1"
                logger.debug(
                    f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {callback_data}")
                return callback_data
            else:
                logger.debug(
                    "–£ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")
                return "main_menu"
        else:
            logger.warning(f"–£ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id} –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return "main_menu"
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ back_data –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
        return "main_menu"


async def generate_product_text(product: Product) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
        category = await get_product_category(product)
        category_path = await get_category_path(category) if category else []
        category_path = " > ".join(
            reversed(category_path)) if category_path else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å —É—á—ë—Ç–æ–º PRICE_DECIMAL_PLACES
        price = float(product.price)
        price_str = f"{price:.{PRICE_DECIMAL_PLACES}f} ‚ÇΩ"

        text = (
            f"üè∑Ô∏è {hitalic(category_path)}\n\n"
            f"{hbold(product.name)}\n"
            f"üí∞ {price_str}\n\n"
            f"üìù {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )
        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
        return text
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
        return f"{product.name}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"


async def handle_photo_message(
    callback: CallbackQuery,
    product: Product,
    text: str,
    back_data: str,
    cart_total: float,
    cart_quantity: int
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ."""
    try:
        from .keyboards import product_detail_keyboard
        markup = product_detail_keyboard(
            product_id=product.id,
            quantity=1,
            cart_total=cart_total,
            cart_quantity=cart_quantity,
            back_data=back_data
        )
        if product.photo:
            logger.debug(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {product.photo.path}")
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer_photo(
                photo=FSInputFile(product.photo.path),
                caption=text,
                reply_markup=markup,
                parse_mode="HTML"
            )
            logger.debug(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
        else:
            logger.debug(
                f"–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞")
            await handle_text_message(callback, product, text, back_data, 1, cart_total, cart_quantity)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.", show_alert=True)


async def handle_text_message(
    callback: CallbackQuery,
    product: Product,
    text: str,
    back_data: str,
    quantity: int,
    cart_total: float,
    cart_quantity: int
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        from .keyboards import product_detail_keyboard
        markup = product_detail_keyboard(
            product_id=product.id,
            quantity=quantity,
            cart_total=cart_total,
            cart_quantity=cart_quantity,
            back_data=back_data
        )
        await callback.message.edit_text(
            text=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
        logger.debug(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
