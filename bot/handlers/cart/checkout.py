import logging
import re
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.text_decorations import html_decoration as html

from .models import async_get_or_create_user, async_get_cart, async_get_cart_items, async_create_order, async_get_order_details
from .keyboards import generate_edit_choice_keyboard, generate_back_keyboard, generate_skip_keyboard, generate_confirmation_keyboard  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from .states import OrderState
from .utils import (
    ensure_subscription, delete_previous_message, send_message_with_state,
    generate_order_text, back_to_previous_state, show_cart
)
from bot.core.config import SUPPORT_TELEGRAM

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await ensure_subscription(callback, user_id, "checkout"):
        return

    user, _ = await async_get_or_create_user(user_id)
    cart_items = await async_get_cart_items(user)

    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    await delete_previous_message(callback, state)
    await send_message_with_state(
        callback,
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        state,
        reply_markup=generate_back_keyboard()
    )
    await state.set_state(OrderState.waiting_for_address)


@router.callback_query(F.data == "back", OrderState.waiting_for_address)
async def back_from_address(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑ —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    user, _ = await async_get_or_create_user(callback.from_user.id)
    data = await state.get_data()
    page = data.get("cart_page", 1)
    await state.clear()
    await show_cart(user, callback, page=page)


@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å."""
    address = message.text.strip()
    if not address:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(address=address)
    await delete_previous_message(message, state)
    await send_message_with_state(
        message,
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        state,
        reply_markup=generate_back_keyboard()
    )
    await state.set_state(OrderState.waiting_for_phone)


@router.callback_query(F.data == "back", OrderState.waiting_for_phone)
async def back_from_phone(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_address,
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        generate_back_keyboard()
    )


@router.message(OrderState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    if not re.match(r'^\+?\d{10,15}$', phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(phone=phone)
    await delete_previous_message(message, state)
    await send_message_with_state(
        message,
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        state,
        reply_markup=generate_skip_keyboard()
    )
    await state.set_state(OrderState.waiting_for_wishes)


@router.callback_query(F.data == "back", OrderState.waiting_for_wishes)
async def back_from_wishes(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_phone,
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        generate_back_keyboard()
    )


@router.message(OrderState.waiting_for_wishes)
@router.callback_query(F.data == "skip", OrderState.waiting_for_wishes)
async def process_wishes(request: Message | CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É."""
    wishes = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(wishes=wishes)

    await delete_previous_message(request, state)
    await send_message_with_state(
        request,
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        state,
        reply_markup=generate_skip_keyboard()
    )
    await state.set_state(OrderState.waiting_for_delivery_time)


@router.callback_query(F.data == "back", OrderState.waiting_for_delivery_time)
async def back_from_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –ø–æ–∂–µ–ª–∞–Ω–∏–π."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_wishes,
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        generate_skip_keyboard()
    )


@router.message(OrderState.waiting_for_delivery_time)
@router.callback_query(F.data == "skip", OrderState.waiting_for_delivery_time)
async def process_delivery_time(request: Message | CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    delivery_time = request.text.strip() if isinstance(request, Message) else None
    await state.update_data(desired_delivery_time=delivery_time)

    user, _ = await async_get_or_create_user(request.from_user.id)
    cart = await async_get_cart(user)
    text, total = await generate_order_text(user, state, cart.id)

    await delete_previous_message(request, state)
    await send_message_with_state(
        request,
        text,
        state,
        reply_markup=generate_confirmation_keyboard(total),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(OrderState.waiting_for_confirmation)


@router.callback_query(F.data == "back", OrderState.waiting_for_confirmation)
async def back_from_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_delivery_time,
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        generate_skip_keyboard()
    )


@router.callback_query(F.data == "confirm", OrderState.waiting_for_confirmation)
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑.")

    data = await state.get_data()
    user, _ = await async_get_or_create_user(user_id)

    try:
        order = await async_create_order(
            user_id=user.telegram_id,
            address=data.get("address"),
            phone=data.get("phone"),
            wishes=data.get("wishes"),
            desired_delivery_time=data.get("desired_delivery_time")
        )

        items_text, total = await async_get_order_details(order.id)

        user_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ {html.bold(f'#{order.id}')} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {html.quote(data.get('address'))}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {html.quote(data.get('phone'))}\n"
            f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {html.quote(data.get('wishes')) if data.get('wishes') else '–ù–µ—Ç'}\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(data.get('desired_delivery_time')) if data.get('desired_delivery_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"üíµ –ò—Ç–æ–≥–æ: {html.bold(f'{total} ‚ÇΩ')}"
        )

        await delete_previous_message(callback, state)
        await callback.message.answer(
            user_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode=ParseMode.HTML
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if SUPPORT_TELEGRAM and SUPPORT_TELEGRAM.strip():
            try:
                admin_chat_id = int(SUPPORT_TELEGRAM)
                admin_text = (
                    f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id} (@{user.username if user.username else '–ù–µ—Ç –Ω–∏–∫–∞'})\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {data.get('address')}\n"
                    f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data.get('wishes') if data.get('wishes') else '–ù–µ—Ç'}\n"
                    f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('desired_delivery_time') if data.get('desired_delivery_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    f"üõí –¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
                    f"üíµ –°—É–º–º–∞: {total} ‚ÇΩ"
                )
                await bot.send_message(
                    chat_id=admin_chat_id,
                    text=admin_text,
                    parse_mode=ParseMode.HTML
                )
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {admin_chat_id}")
            except ValueError:
                logger.error(
                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SUPPORT_TELEGRAM: {SUPPORT_TELEGRAM}. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞.")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        else:
            logger.warning(
                "SUPPORT_TELEGRAM –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_TELEGRAM}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    await state.clear()


@router.callback_query(F.data == "edit", OrderState.waiting_for_confirmation)
async def edit_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ '–ò–∑–º–µ–Ω–∏—Ç—å'."""
    await delete_previous_message(callback, state)
    await send_message_with_state(
        callback,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        state,
        reply_markup=generate_edit_choice_keyboard()
    )
    await state.set_state(OrderState.waiting_for_edit_choice)


@router.callback_query(F.data == "back_to_confirmation", OrderState.waiting_for_edit_choice)
async def back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."""
    user, _ = await async_get_or_create_user(callback.from_user.id)
    cart = await async_get_cart(user)
    text, total = await generate_order_text(user, state, cart.id)

    await delete_previous_message(callback, state)
    await send_message_with_state(
        callback,
        text,
        state,
        reply_markup=generate_confirmation_keyboard(total),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(OrderState.waiting_for_confirmation)


@router.callback_query(F.data == "edit_address", OrderState.waiting_for_edit_choice)
async def edit_address(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_address,
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        generate_back_keyboard()
    )


@router.callback_query(F.data == "edit_phone", OrderState.waiting_for_edit_choice)
async def edit_phone(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_phone,
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        generate_back_keyboard()
    )


@router.callback_query(F.data == "edit_wishes", OrderState.waiting_for_edit_choice)
async def edit_wishes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_wishes,
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        generate_skip_keyboard()
    )


@router.callback_query(F.data == "edit_delivery_time", OrderState.waiting_for_edit_choice)
async def edit_delivery_time(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await back_to_previous_state(
        callback,
        state,
        OrderState.waiting_for_delivery_time,
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        generate_skip_keyboard()
    )
