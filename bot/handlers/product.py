# bot/handlers/product.py
import os
from typing import Dict, Optional, Tuple

from bot.handlers.cart.models import get_cart_quantity, get_cart_total
from bot.core.utils import get_or_create_user

import django
from asgiref.sync import sync_to_async
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.markdown import hbold

from django_app.shop.models import Cart, CartItem, Product, TelegramUser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging

logger = logging.getLogger(__name__)

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∫–ª—é—á: (user_id, product_id), –∑–Ω–∞—á–µ–Ω–∏–µ: quantity)
quantity_storage: Dict[Tuple[int, int], int] = {}

def register_product_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    """
    dp.include_router(router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_app.settings")
django.setup()
logger.info("Django —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def get_cart_items_count(user: TelegramUser) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    @sync_to_async(thread_sensitive=True)
    def _get_count():
        count = CartItem.objects.filter(cart__user=user, is_active=True).count()
        logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {count}")
        return count
    return await _get_count()

async def get_product_by_id(product_id: int) -> Product:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID.
    """
    @sync_to_async(thread_sensitive=True)
    def _fetch():
        product = Product.objects.select_related('category').get(id=product_id, is_active=True)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä: {product.name} (ID: {product_id})")
        return product
    return await _fetch()

async def get_or_create_cart(user: TelegramUser) -> Tuple[Cart, bool]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    @sync_to_async(thread_sensitive=True)
    def _get_or_create():
        cart, created = Cart.objects.get_or_create(
            user=user,
            is_active=True
        )
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}.")
        else:
            logger.debug(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –ø–æ–ª—É—á–µ–Ω–∞.")
        return cart, created
    return await _get_or_create()

async def update_cart_item(cart: Cart, product: Product, quantity: int) -> Optional[CartItem]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω—å—à–µ 1, —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    @sync_to_async(thread_sensitive=True)
    def _update(c: Cart, p: Product, q: int) -> Optional[CartItem]:
        item, created = CartItem.objects.get_or_create(
            cart=c,
            product=p,
            defaults={'quantity': q, 'is_active': True}
        )
        if created:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä {p.name} (ID: {p.id}) –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.user.telegram_id} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {q}.")
        else:
            item.quantity += q
            if item.quantity < 1:
                item.soft_delete()
                logger.info(f"–¢–æ–≤–∞—Ä {p.name} (ID: {p.id}) —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.user.telegram_id} –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
                return None
            item.save()
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {p.name} (ID: {p.id}) –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.user.telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {item.quantity}.")
        return item

    return await _update(cart, product, quantity)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def product_detail_keyboard(
        product_id: int,
        back_callback: str,
        current_quantity: int = 1,
        cart_total: int = 0,
        cart_quantity: int = 0
) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}.")
    buttons = [
        [
            InlineKeyboardButton(text="-", callback_data=f"dec:{product_id}"),
            InlineKeyboardButton(text=str(current_quantity), callback_data="noop"),
            InlineKeyboardButton(text="+", callback_data=f"inc:{product_id}"),
        ],
        [
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add:{product_id}:{current_quantity}"
            )
        ],
    ]

    cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    buttons.append([
        InlineKeyboardButton(
            text=cart_text,
            callback_data="cart"
        )
    ])
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ö–æ—Ä–∑–∏–Ω–∞' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞.")

    buttons.append([
        InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data=back_callback),
        InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
    ])
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ '–í –º–µ–Ω—é' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞.")

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(F.data.startswith("product_"))
async def show_product_detail(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}.")

    try:
        product = await get_product_by_id(product_id)
        quantity_storage[(user_id, product_id)] = 1
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: 1.")

        back_data = await generate_back_data(product)
        text = await generate_product_text(product)

        user, _ = await get_or_create_user(user_id=user_id)
        cart_total = await get_cart_total(user)
        cart_quantity = await get_cart_quantity(user)

        if product.photo:
            await handle_photo_message(callback, product, text, back_data, cart_total, cart_quantity)
        else:
            await handle_text_message(callback, product, text, back_data, quantity=1, cart_total=cart_total, cart_quantity=cart_quantity)

    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("inc:"))
async def increase_quantity(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    key = (user_id, product_id)
    current = quantity_storage.get(key, 1)
    quantity_storage[key] = current + 1
    logger.debug(f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {quantity_storage[key]}.")

    await update_product_message(callback, product_id)

@router.callback_query(F.data.startswith("dec:"))
async def decrease_quantity(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    product_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    key = (user_id, product_id)
    current = quantity_storage.get(key, 1)
    if current > 1:
        quantity_storage[key] = current - 1
        logger.debug(f"–£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {quantity_storage[key]}.")
    else:
        logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ: {current}.")

    await update_product_message(callback, product_id)

@router.callback_query(F.data.startswith("add:"))
async def add_to_cart_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    _, product_id, quantity = callback.data.split(":")
    product_id = int(product_id)
    quantity = int(quantity)
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç ID {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}.")

    try:
        product = await get_product_by_id(product_id)
        user, _ = await get_or_create_user(user_id=user_id)
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")

        cart, created = await get_or_create_cart(user)
        if created:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}.")

        item = await update_cart_item(cart, product, quantity)
        if item:
            logger.info(f"–¢–æ–≤–∞—Ä {product.name} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {item.quantity}.")
        else:
            logger.info(f"–¢–æ–≤–∞—Ä {product.name} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")

        key = (user_id, product_id)
        if key in quantity_storage:
            del quantity_storage[key]
            logger.debug(f"–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product.name} √ó {quantity}", show_alert=True)
        logger.info(f"–¢–æ–≤–∞—Ä {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}.")

        cart_total = await get_cart_total(user)
        cart_quantity = await get_cart_quantity(user)
        logger.debug(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {cart_total} ‚ÇΩ, {cart_quantity} —à—Ç.")

        await update_product_message(
            callback,
            product_id,
            reset_quantity=True,
            cart_total=cart_total,
            cart_quantity=cart_quantity
        )

    except Product.DoesNotExist:
        logger.error(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID {product_id} –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def update_product_message(
    callback: CallbackQuery,
    product_id: int,
    reset_quantity: bool = False,
    cart_total: int = 0,
    cart_quantity: int = 0
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.
    """
    user_id = callback.from_user.id
    key = (user_id, product_id)
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    try:
        product = await get_product_by_id(product_id)
        back_data = await generate_back_data(product)

        if reset_quantity:
            quantity = 1
            if key in quantity_storage:
                del quantity_storage[key]
                logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ 1.")
        else:
            quantity = quantity_storage.get(key, 1)

        if not cart_total and not cart_quantity:
            user, _ = await get_or_create_user(user_id=user_id)
            cart_total = await get_cart_total(user)
            cart_quantity = await get_cart_quantity(user)

        text = await generate_product_text(product)
        markup = product_detail_keyboard(
            product.id,
            back_data,
            quantity,
            cart_total,
            cart_quantity
        )

        if product.photo:
            await callback.message.edit_caption(
                caption=text,
                reply_markup=markup
            )
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await callback.message.edit_text(
                text=text,
                reply_markup=markup
            )
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: {e}")
            raise
        else:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}: {e}")

async def generate_back_data(product: Product) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    back_data = f"cat_page_{product.category_id}_1"
    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID {product.category_id}.")
    return back_data

async def generate_product_text(product: Product) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å breadcrumb.
    """
    breadcrumbs = []
    current_category = product.category
    while current_category:
        breadcrumbs.append(current_category.name)
        current_category = await sync_to_async(lambda: current_category.parent)()
    
    breadcrumbs.append("–ö–∞—Ç–∞–ª–æ–≥")
    breadcrumb_text = " > ".join(reversed(breadcrumbs))
    
    text = (
        f"{breadcrumb_text}\n\n"
        f"{hbold(product.name)}\n"
        f"–¶–µ–Ω–∞: {product.price}‚ÇΩ\n\n"
        f"{product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.name} (ID: {product.id}) —Å breadcrumb: {breadcrumb_text}.")
    return text

async def handle_photo_message(callback: CallbackQuery, product: Product, text: str, back_data: str, cart_total: int, cart_quantity: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    try:
        await callback.message.delete()
        logger.debug(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}.")
        msg = await callback.message.answer_photo(
            photo=FSInputFile(product.photo.path),
            caption=text,
            reply_markup=product_detail_keyboard(product.id, back_data, cart_total=cart_total, cart_quantity=cart_quantity)
        )
        quantity_storage[(callback.from_user.id, product.id)] = 1
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)

async def handle_text_message(callback: CallbackQuery, product: Product, text: str, back_data: str, quantity: int, cart_total: int, cart_quantity: int):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=product_detail_keyboard(product.id, back_data, quantity, cart_total=cart_total, cart_quantity=cart_quantity)
        )
        logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        else:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product.id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
