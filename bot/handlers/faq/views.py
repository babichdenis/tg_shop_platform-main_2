import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hunderline
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from bot.core.config import FAQ_PER_PAGE, FAQ_SEARCH_PER_PAGE, SUPPORT_TELEGRAM
from .db import get_faq_page, get_faq_count, get_faq_item, search_faq, get_search_count
from .keyboards import build_faq_keyboard, build_search_keyboard, back_to_list_keyboard

router = Router()
logger = logging.getLogger(__name__)

class FAQStates(StatesGroup):
    browsing = State()
    waiting_question = State()
    viewing_item = State()
    searching = State()


async def edit_or_resend_message(callback: CallbackQuery, text: str, markup: InlineKeyboardMarkup):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
    try:
        await callback.message.edit_text(text=text, reply_markup=markup)
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            try:
                await callback.message.edit_caption(caption=text, reply_markup=markup)
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å.")
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
                await callback.message.delete()
                await callback.message.answer(text=text, reply_markup=markup)
                logger.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ.")


@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª FAQ.")
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    search_message_id = data.get('search_message_id')
    if search_message_id:
        try:
            await callback.message.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=search_message_id
            )
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {search_message_id}.")
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {search_message_id}: {e}")
    
    await state.set_state(FAQStates.browsing)
    await state.update_data(current_page=1, search_message_id=None)
    await show_faq_page(callback, 1)


async def show_faq_page(callback: CallbackQuery, page: int):
    logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ {page}.")
    faq_items = await get_faq_page(page)
    total_count = await get_faq_count()
    total_pages = max(1, (total_count - 1) // FAQ_PER_PAGE + 1)
    page = max(1, min(page, total_pages))

    start_index = (page - 1) * FAQ_PER_PAGE
    text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    if faq_items:
        text += "\n".join(f"{start_index + i + 1}. {item.question}" for i, item in enumerate(faq_items))
    else:
        text = "‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤\n"

    if faq_items:
        markup = build_faq_keyboard(faq_items, page, total_pages)
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        logger.debug("FAQ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    await edit_or_resend_message(callback, text, markup)
    await callback.answer()
    logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ FAQ {page} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞.")


@router.callback_query(F.data.startswith("faq_page_"))
async def faq_pagination(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[-1])
        logger.debug(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ FAQ: {callback.data} - {e}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    await state.update_data(current_page=page)
    await show_faq_page(callback, page)


@router.callback_query(F.data.startswith("faq_item_"))
async def show_faq_item(callback: CallbackQuery, state: FSMContext):
    try:
        item_id = int(callback.data.split("_")[-1])
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ FAQ —Å ID {item_id}.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FAQ: {callback.data} - {e}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FAQ.", show_alert=True)
        return

    faq_item = await get_faq_item(item_id)
    if not faq_item:
        logger.warning(f"FAQ —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    data = await state.get_data()
    current_page = data.get('current_page', 1)

    text = (
        f"{hunderline('–í–æ–ø—Ä–æ—Å:')}\n{faq_item.question}\n\n"
        f"{hunderline('–û—Ç–≤–µ—Ç:')}\n{faq_item.answer}"
    )

    await edit_or_resend_message(callback, text, back_to_list_keyboard(current_page))
    await callback.answer()
    logger.info(f"FAQ —Å ID {item_id} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")


@router.callback_query(F.data == "ask_question")
async def ask_question_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É –≤–æ–ø—Ä–æ—Å–∞.")
    await state.set_state(FAQStates.waiting_question)
    await edit_or_resend_message(
        callback,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º:",
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="faq")]
        ])
    )
    await callback.answer()


@router.message(F.text, StateFilter(FAQStates.waiting_question))
async def process_question(message: Message, state: FSMContext):
    query = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{query}'.")
    await state.set_state(FAQStates.searching)
    await state.update_data(search_query=query, search_page=1)
    await show_search_results(message, state, query, 1)


async def show_search_results(message: Message, state: FSMContext, query: str, page: int):
    logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}', —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
    await state.update_data(search_query=query, search_page=page)

    decoded_query = query.replace("##", "_")
    results, indices = await search_faq(decoded_query, page)
    total_count = await get_search_count(decoded_query)
    total_pages = max(1, (total_count - 1) // FAQ_SEARCH_PER_PAGE + 1)
    page = max(1, min(page, total_pages))

    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{decoded_query}':\n\n"
    if results:
        text += "\n".join(f"{index}. {item.question}" for item, index in zip(results, indices))
        markup = build_search_keyboard(results, indices, page, total_pages, decoded_query)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_info = (
            f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {message.from_user.id}\n"
            f"–ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}\n"
            f"Username: @{message.from_user.username or '–Ω–µ—Ç'}\n"
            f"–í–æ–ø—Ä–æ—Å: {decoded_query}"
        )
        try:
            if SUPPORT_TELEGRAM:
                await message.bot.send_message(
                    chat_id=SUPPORT_TELEGRAM,
                    text=user_info
                )
                logger.info(f"–í–æ–ø—Ä–æ—Å '{decoded_query}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {SUPPORT_TELEGRAM}.")
            else:
                logger.warning("SUPPORT_TELEGRAM –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except TelegramBadRequest as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        text += f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_TELEGRAM}"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq")]
        ])
        logger.debug("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ.")
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π search_message_id
    data = await state.get_data()
    search_message_id = data.get('search_message_id')

    if search_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=search_message_id,
                text=text,
                reply_markup=markup
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {e}")
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=search_message_id
                )
                logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {search_message_id}.")
            except TelegramBadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {search_message_id}: {e}")
            new_msg = await message.answer(text, reply_markup=markup)
            await state.update_data(search_message_id=new_msg.message_id)
            logger.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    else:
        new_msg = await message.answer(text, reply_markup=markup)
        await state.update_data(search_message_id=new_msg.message_id)
        logger.info("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@router.callback_query(F.data.startswith("search_page_"))
async def search_pagination(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞.")
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            raise ValueError("Invalid callback data format")
        page = int(parts[2])
        query = "_".join(parts[3:]).replace("##", "_")
        logger.debug(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'.")
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ FAQ: {callback.data} - {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.", show_alert=True)
        return

    await show_search_results(callback.message, state, query, page)
    await callback.answer()
    logger.info(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ FAQ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@router.message(F.text == "/faq")
async def faq_command(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq.
    """
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /faq.")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.set_state(FAQStates.browsing)
        await state.update_data(current_page=1, search_message_id=None)

        # –ü–æ–ª—É—á–∞–µ–º FAQ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        faq_items = await get_faq_page(page=1)
        total_count = await get_faq_count()
        total_pages = max(1, (total_count - 1) // FAQ_PER_PAGE + 1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        start_index = 0  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
        text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        if faq_items:
            text += "\n".join(f"{start_index + i + 1}. {item.question}" for i, item in enumerate(faq_items))
        else:
            text = "‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if faq_items:
            markup = build_faq_keyboard(faq_items, page=1, total_pages=total_pages)
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            logger.debug("FAQ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            text,
            reply_markup=markup,
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /faq: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ FAQ")
