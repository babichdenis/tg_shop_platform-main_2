import logging
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from django_app.shop.models import Category, Product
from bot.handlers.cart.models import async_get_cart_quantity, async_get_cart_total
from bot.core.config import (
    CATEGORIES_PER_ROW, PRODUCTS_PER_ROW, MAX_BUTTON_TEXT_LENGTH,
    CATEGORIES_PER_PAGE, PRODUCTS_PER_PAGE
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.info(
    "–ó–∞–≥—Ä—É–∂–µ–Ω keyboards.py –≤–µ—Ä—Å–∏–∏ 2025-04-22 —Å async_get_cart_quantity –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PER_ROW")


@sync_to_async
def get_parent_category(category_id: str) -> Category:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :return: –û–±—ä–µ–∫—Ç Category –∏–ª–∏ None, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    try:
        category = Category.objects.get(id=category_id)
        return category.parent
    except Category.DoesNotExist:
        logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None


async def build_categories_keyboard(categories: List[Category], parent_id: str, page: int, total_pages: int, user) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    :param categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    :param parent_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ("root" –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö).
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.
    :param user: –û–±—ä–µ–∫—Ç TelegramUser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã.
    :return: InlineKeyboardMarkup —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    logger.debug(
        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: parent_id={parent_id}, page={page}, total_pages={total_pages}")
    buttons = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ CATEGORIES_PER_ROW –≤ —Ä—è–¥
    row = []
    for category in categories:
        button_text = category.name[:MAX_BUTTON_TEXT_LENGTH]
        row.append(InlineKeyboardButton(
            text=button_text,
            callback_data=f"cat_page_{category.id}_1"
        ))
        if len(row) >= CATEGORIES_PER_ROW:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    if total_pages > 1:
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data=f"cat_page_{parent_id}_{page - 1}"
            ))
        else:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data="noop"
            ))
        pagination_buttons.append(InlineKeyboardButton(
            text=f"{page}/{total_pages}", callback_data="noop"
        ))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data=f"cat_page_{parent_id}_{page + 1}"
            ))
        else:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data="noop"
            ))
        buttons.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    try:
        cart_quantity = await async_get_cart_quantity(user)
        cart_total = await async_get_cart_total(user)
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
        cart_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞: –æ—à–∏–±–∫–∞"
    buttons.append([InlineKeyboardButton(
        text=cart_text, callback_data="cart"
    )])

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
    if parent_id == "root":
        back_callback = "main_menu"
    else:
        try:
            parent_category = await get_parent_category(parent_id)
            grandparent_id = parent_category.id if parent_category else "root"
            back_callback = f"cat_page_{grandparent_id}_1"
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {parent_id}: {e}")
            back_callback = "main_menu"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback),
        InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def build_products_keyboard(category_id: int, page: int, products: List[Product], total_count: int, user) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    :param total_count: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.
    :param user: –û–±—ä–µ–∫—Ç TelegramUser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã.
    :return: InlineKeyboardMarkup —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    logger.debug(
        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤: category_id={category_id}, page={page}, total_count={total_count}")
    buttons = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ PRODUCTS_PER_ROW –≤ —Ä—è–¥
    row = []
    for product in products:
        button_text = f"{product.name[:MAX_BUTTON_TEXT_LENGTH]} ({product.price} ‚ÇΩ)"
        row.append(InlineKeyboardButton(
            text=button_text,
            callback_data=f"product_{product.id}"
        ))
        if len(row) >= PRODUCTS_PER_ROW:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    max_page = max(1, (total_count + PRODUCTS_PER_PAGE - 1) //
                   PRODUCTS_PER_PAGE)
    if max_page > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data=f"prod_page_{category_id}_{page - 1}"
            ))
        nav_buttons.append(InlineKeyboardButton(
            text=f"{page}/{max_page}", callback_data="noop"
        ))
        if page < max_page:
            nav_buttons.append(InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data=f"prod_page_{category_id}_{page + 1}"
            ))
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç" –∏ –∫–æ—Ä–∑–∏–Ω—ã
    try:
        cart_quantity = await async_get_cart_quantity(user)
        cart_total = await async_get_cart_total(user)
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞: {cart_total} ‚ÇΩ ({cart_quantity} —à—Ç.)" if cart_quantity > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞: –ø—É—Å—Ç–∞"
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
        cart_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞: –æ—à–∏–±–∫–∞"
    buttons.append([InlineKeyboardButton(
        text="üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list_1"
    )])
    buttons.append([InlineKeyboardButton(
        text=cart_text, callback_data="cart"
    )])

    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –º–µ–Ω—é"
    try:
        parent_category = await get_parent_category(str(category_id))
        parent_id = parent_category.id if parent_category else "root"
        back_callback = f"cat_page_{parent_id}_1"
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {category_id}: {e}")
        back_callback = "main_menu"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback),
        InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
