import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from asgiref.sync import sync_to_async
from bot.core.config import (
    SUBSCRIPTION_CHANNEL_ID, SUBSCRIPTION_GROUP_ID,
    PRODUCT_NOT_FOUND, CATALOG_MESSAGE, CATALOG_ERROR
)
from bot.handlers.start.subscriptions import check_subscriptions
from .breadcrumbs import get_category_path
from .data import get_categories, get_products_page
from .keyboards import build_categories_keyboard, build_products_keyboard
from .utils import safe_edit_message, get_user_from_callback

router = Router()

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω callbacks.py –≤–µ—Ä—Å–∏–∏ 2025-04-22")


@router.callback_query(F.data.startswith("cat_page_"))
async def categories_pagination(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç: "cat_page_<parent_id>_<page>")
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")

        parent_id = parts[2]
        page = int(parts[3])
        user_id = callback.from_user.id
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, parent_id={parent_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        logger.debug(f"–í—ã–∑–æ–≤ get_categories('{parent_id}', {page}) –≤ cat_page")
        result = await get_categories(parent_id, page)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_categories –≤ cat_page: {result}")
        if not isinstance(result, tuple):
            logger.error(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ –∫–æ—Ä—Ç–µ–∂: {type(result)}: {result}")
            raise ValueError(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ –∫–æ—Ä—Ç–µ–∂: {type(result)}")
        text, categories, total_pages = result
        if not isinstance(text, str):
            logger.error(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É –≤ text: {type(text)}: {text}")
            text = CATALOG_ERROR

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_callback(callback)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if parent_id != "root":
            _, subcategories, _ = await get_categories(parent_id, 1)
            if not subcategories:
                # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                products, total_count = await get_products_page(int(parent_id), page)
                if products:
                    breadcrumb = await sync_to_async(get_category_path)(parent_id)
                    if not isinstance(breadcrumb, str):
                        logger.error(
                            f"get_category_path –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(breadcrumb)}: {breadcrumb}")
                        breadcrumb = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"
                    kb = await build_products_keyboard(int(parent_id), page, products, total_count, user)
                    await safe_edit_message(callback, f"{breadcrumb}\n\n{CATALOG_MESSAGE}", kb)
                    await callback.answer()
                    return
                else:
                    breadcrumb = await sync_to_async(get_category_path)(parent_id)
                    if not isinstance(breadcrumb, str):
                        logger.error(
                            f"get_category_path –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(breadcrumb)}: {breadcrumb}")
                        breadcrumb = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"
                    text = f"{breadcrumb}\n\n{PRODUCT_NOT_FOUND}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await build_categories_keyboard(categories, parent_id, page, total_pages, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, keyboard)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("prod_page_"))
async def products_pagination(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    try:
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")

        category_id = int(parts[2])
        page = int(parts[3])
        logger.info(
            f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è category_id {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_callback(callback)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        products, total_count = await get_products_page(category_id, page)

        if not products:
            logger.warning(
                f"–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID {category_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}.")
            breadcrumb = await sync_to_async(get_category_path)(str(category_id))
            if not isinstance(breadcrumb, str):
                logger.error(
                    f"get_category_path –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(breadcrumb)}: {breadcrumb}")
                breadcrumb = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"
            await safe_edit_message(callback, f"{breadcrumb}\n\n{PRODUCT_NOT_FOUND}", None)
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        breadcrumb = await sync_to_async(get_category_path)(str(category_id))
        if not isinstance(breadcrumb, str):
            logger.error(
                f"get_category_path –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(breadcrumb)}: {breadcrumb}")
            breadcrumb = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"
        kb = await build_products_keyboard(category_id, page, products, total_count, user)
        await safe_edit_message(callback, f"{breadcrumb}\n\n{CATALOG_MESSAGE}", kb)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
    finally:
        await callback.answer()


@router.callback_query(F.data == "catalog")
async def catalog_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ç–∞–ª–æ–≥'.
    """
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥'.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if SUBSCRIPTION_CHANNEL_ID or SUBSCRIPTION_GROUP_ID:
            subscription_result, message_text = await check_subscriptions(callback.bot, user_id, "catalog")
            if not subscription_result:
                try:
                    await callback.message.edit_text(
                        message_text,
                        disable_web_page_preview=True,
                        parse_mode="HTML"
                    )
                except TelegramBadRequest:
                    await callback.message.answer(
                        message_text,
                        disable_web_page_preview=True,
                        parse_mode="HTML"
                    )
                await callback.answer()
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        logger.debug(f"–í—ã–∑–æ–≤ get_categories('root', 1) –≤ catalog_callback")
        result = await get_categories("root", 1)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_categories –≤ catalog_callback: {result}")
        if not isinstance(result, tuple):
            logger.error(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ –∫–æ—Ä—Ç–µ–∂: {type(result)}: {result}")
            raise ValueError(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ –∫–æ—Ä—Ç–µ–∂: {type(result)}")
        text, categories, total_pages = result
        if not isinstance(text, str):
            logger.error(
                f"get_categories –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É –≤ text: {type(text)}: {text}")
            text = CATALOG_ERROR

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_callback(callback)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard = await build_categories_keyboard(categories, "root", 1, total_pages, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ callback 'catalog': {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", show_alert=True)
    finally:
        await callback.answer()
