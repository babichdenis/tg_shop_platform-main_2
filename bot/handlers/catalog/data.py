import logging
from typing import Tuple, List
from asgiref.sync import sync_to_async
from django_app.shop.models import Category, Product
from bot.core.config import CATEGORIES_PER_PAGE, PRODUCTS_PER_PAGE
from .breadcrumbs import get_category_path

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω data.py –≤–µ—Ä—Å–∏–∏ 2025-04-22 —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º get_category_path")


@sync_to_async
def get_categories(parent_id: str, page: int) -> Tuple[str, List[Category], int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ù–∞—á–∞–ª–æ get_categories: parent_id={parent_id}, page={page}")

    try:
        if parent_id == "root":
            categories = Category.objects.filter(
                parent__isnull=True, is_active=True)
        else:
            categories = Category.objects.filter(
                parent_id=parent_id, is_active=True)

        total_categories = categories.count()
        total_pages = max(
            1, (total_categories + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE)
        page = max(1, min(page, total_pages))
        start = (page - 1) * CATEGORIES_PER_PAGE
        end = start + CATEGORIES_PER_PAGE
        categories_on_page = list(categories[start:end])

        breadcrumb = get_category_path(parent_id)  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        if not isinstance(breadcrumb, str):
            logger.error(
                f"get_category_path –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É: {type(breadcrumb)}: {breadcrumb}")
            breadcrumb = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"

        if not categories_on_page:
            logger.debug(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, breadcrumb: {breadcrumb}")
            result = (f"{breadcrumb}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", [], 0)
            logger.info(f"–í–æ–∑–≤—Ä–∞—â—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π): {result}")
            return result

        text = f"{breadcrumb}\n\n–í—ã–±–µ—Ä–∏—Ç–µ {'–∫–∞—Ç–µ–≥–æ—Ä–∏—é' if parent_id == 'root' else '–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é'}:"
        result = (text, categories_on_page, total_pages)
        logger.info(f"–í–æ–∑–≤—Ä–∞—â—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è parent_id={parent_id}, page={page}: {e}")
        result = ("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", [], 0)
        logger.info(f"–í–æ–∑–≤—Ä–∞—â—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ: {result}")
        return result


@sync_to_async
def get_products_page(category_id: int, page: int, per_page: int = PRODUCTS_PER_PAGE) -> Tuple[List[Product], int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: category_id={category_id}, page={page}")

    try:
        qs = Product.objects.filter(category_id=category_id, is_active=True)
        total_count = qs.count()
        start = (page - 1) * per_page
        end = start + per_page
        products = list(qs[start:end])
        logger.debug(
            f"–ù–∞–π–¥–µ–Ω–æ {total_count} —Ç–æ–≤–∞—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(products)} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
        return products, total_count
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è category_id={category_id}, page={page}: {e}")
        return [], 0
