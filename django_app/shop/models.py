import logging
from django.db import models
from mptt.models import MPTTModel, TreeForeignKey

logger = logging.getLogger(__name__)

class TelegramUser(models.Model):
    telegram_id = models.BigIntegerField(unique=True, verbose_name="ID –≤ Telegram")
    first_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ò–º—è")
    last_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–§–∞–º–∏–ª–∏—è")
    username = models.CharField(max_length=255, blank=True, null=True, verbose_name="–Æ–∑–µ—Ä–Ω–µ–π–º")
    language_code = models.CharField(max_length=10, blank=True, null=True, verbose_name="–Ø–∑—ã–∫")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    last_activity = models.DateTimeField(auto_now=True, verbose_name="–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return f"{self.first_name} (@{self.username})" if self.username else f"User {self.telegram_id}"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram"

class Category(MPTTModel):
    name = models.CharField(max_length=100, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    parent = TreeForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    class MPTTMeta:
        order_insertion_by = ['name']

    def __str__(self):
        return self.name

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

class Product(models.Model):
    category = TreeForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name='products',
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞")
    photo = models.ImageField(
        upload_to='product_photos/',
        blank=True,
        null=True,
        default=None,
        verbose_name="–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return f"{self.name} ({self.category.name})"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"

class FAQ(models.Model):
    question = models.CharField(max_length=255, verbose_name="–í–æ–ø—Ä–æ—Å")
    answer = models.TextField(verbose_name="–û—Ç–≤–µ—Ç")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return self.question

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å"
        verbose_name_plural = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"

class Cart(models.Model):
    user = models.ForeignKey(TelegramUser, on_delete=models.CASCADE, related_name='carts', verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username or self.user.telegram_id}"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items', verbose_name="–ö–æ—Ä–∑–∏–Ω–∞")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    quantity = models.PositiveIntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã"

class Order(models.Model):
    # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ —Å —ç–º–æ–¥–∑–∏
    STATUS_ACCEPTED = 'accepted'       # üÜï –ü—Ä–∏–Ω—è—Ç
    STATUS_ASSEMBLING = 'assembling'   # üõ†Ô∏è –í —Å–±–æ—Ä–∫–µ
    STATUS_PACKED = 'packed'           # üì¶ –£–ø–∞–∫–æ–≤–∞–Ω
    STATUS_ON_WAY = 'on_way'           # üöö –í –ø—É—Ç–∏
    STATUS_DELIVERED = 'delivered'     # ‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω
    STATUS_CANCELED = 'canceled'       # ‚ùå –û—Ç–º–µ–Ω—ë–Ω
    STATUS_POSTPONED = 'postponed'     # ‚è∏Ô∏è –ü–µ—Ä–µ–Ω–µ—Å—ë–Ω
    STATUS_PROBLEM = 'problem'         # ‚ùó –ü—Ä–æ–±–ª–µ–º–∞
    STATUS_READY_FOR_PICKUP = 'ready_for_pickup'  # üè™ –ì–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É

    STATUS_CHOICES = [
        (STATUS_ACCEPTED, 'üÜï –ü—Ä–∏–Ω—è—Ç'),
        (STATUS_ASSEMBLING, 'üõ†Ô∏è –í —Å–±–æ—Ä–∫–µ'),
        (STATUS_PACKED, 'üì¶ –£–ø–∞–∫–æ–≤–∞–Ω'),
        (STATUS_ON_WAY, 'üöö –í –ø—É—Ç–∏'),
        (STATUS_DELIVERED, '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
        (STATUS_CANCELED, '‚ùå –û—Ç–º–µ–Ω—ë–Ω'),
        (STATUS_POSTPONED, '‚è∏Ô∏è –ü–µ—Ä–µ–Ω–µ—Å—ë–Ω'),
        (STATUS_PROBLEM, '‚ùó –ü—Ä–æ–±–ª–µ–º–∞'),
        (STATUS_READY_FOR_PICKUP, 'üè™ –ì–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É'),
    ]

    user = models.ForeignKey(TelegramUser, on_delete=models.CASCADE, related_name='orders', verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    phone = models.CharField(max_length=20, default="", verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    wishes = models.TextField(blank=True, null=True, verbose_name="–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É")
    desired_delivery_time = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")
    total = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ò—Ç–æ–≥–æ")
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default=STATUS_ACCEPTED,
        verbose_name="–°—Ç–∞—Ç—É—Å"
    )
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def save(self, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        old_status = None
        if self.pk:
            try:
                old_status = Order.objects.get(pk=self.pk).status
            except Order.DoesNotExist:
                pass
        
        super().save(*args, **kwargs)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if old_status and old_status != self.status:
            try:
                from django_app.shop.tasks import notify_user_of_status_change
                notify_user_of_status_change(self.id, old_status, self.status)
            except ImportError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ ‚Ññ{self.id} –æ—Ç {self.user.username or self.user.telegram_id}"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items', verbose_name="–ó–∞–∫–∞–∑")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    quantity = models.PositiveIntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    def __str__(self):
        return f"{self.product.name} x {self.quantity}"

    def soft_delete(self):
        self.is_active = False
        self.save()

    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞"
