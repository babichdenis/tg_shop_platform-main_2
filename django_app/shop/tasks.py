import logging
import openpyxl
from django.core.files.storage import default_storage
from django.db import transaction
from .models import Order, OrderItem
import aiohttp
import asyncio
from django.conf import settings
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
BOT_TOKEN = settings.BOT_TOKEN

async def send_telegram_message(chat_id, text):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.

    Args:
        chat_id (int): ID —á–∞—Ç–∞ Telegram (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return False

    telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    params = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(telegram_url, json=params) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {text}")
                    return True
                else:
                    error_data = await response.json()
                    error_description = error_data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    if error_data.get("error_code") == 403:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥. –û–ø–∏—Å–∞–Ω–∏–µ: {error_description}")
                    elif error_data.get("error_code") == 404:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: –ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–∏—Å–∞–Ω–∏–µ: {error_description}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {error_description}")
                    return False
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False

def export_orders_to_excel(queryset=None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ Excel-—Ñ–∞–π–ª.

    Args:
        queryset: QuerySet –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ï—Å–ª–∏ None, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.

    –°–æ–∑–¥–∞—ë—Ç Excel-—Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö, –≤–∫–ª—é—á–∞—è ID –∑–∞–∫–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, —Å—Ç–∞—Ç—É—Å –∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É Excel-—Ñ–∞–π–ª—É.
    """
    logger.info('–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel.')

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.title = "–ó–∞–∫–∞–∑—ã"
        logger.debug('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—á–∞—è –∫–Ω–∏–≥–∞ Excel.')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = [
            "ID –∑–∞–∫–∞–∑–∞",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ü–æ–∂–µ–ª–∞–Ω–∏—è",
            "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–°—Ç–∞—Ç—É—Å",
            "–¢–æ–≤–∞—Ä—ã"
        ]
        sheet.append(headers)
        logger.debug('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ Excel.')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        row_number = 2

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if queryset is None:
            orders = Order.objects.filter(is_active=True)
        else:
            orders = queryset
        logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ {orders.count()} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.')

        for order in orders:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–∞–∑–æ–º
            order_items = OrderItem.objects.filter(order=order, is_active=True)
            logger.debug(f'–ü–æ–ª—É—á–µ–Ω–æ {order_items.count()} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}.')

            items_list = [f"{item.product.name} x {item.quantity}" for item in order_items]

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
            sheet.cell(row=row_number, column=1, value=order.id)
            sheet.cell(row=row_number, column=2, value=order.user.username or f"User {order.user.telegram_id}")
            sheet.cell(row=row_number, column=3, value=order.address)
            sheet.cell(row=row_number, column=4, value=order.phone or "-")
            sheet.cell(row=row_number, column=5, value=order.wishes or "-")
            sheet.cell(row=row_number, column=6, value=order.desired_delivery_time or "-")
            sheet.cell(row=row_number, column=7, value=order.get_status_display())
            sheet.cell(row=row_number, column=8, value=", ".join(items_list) if items_list else "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")

            logger.debug(f'–ó–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}.')
            row_number += 1

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏
        excel_filename = "orders_export.xlsx"
        workbook_path = default_storage.path(excel_filename)
        workbook.save(workbook_path)
        logger.info(f'–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: {workbook_path}')

        return workbook_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel: {e}", exc_info=True)
        return None

def notify_user_of_status_change(order_id, old_status, new_status):
    try:
        from .models import Order  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        order = Order.objects.get(id=order_id)
        user = order.user
        
        if not user.telegram_id:
            logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegram_id: {user}")
            return
            
        status_names = dict(Order.STATUS_CHOICES)
        message = (
            f"üîÑ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω—ë–Ω:\n"
            f"–ë—ã–ª–æ: {status_names.get(old_status, old_status)}\n"
            f"–°—Ç–∞–ª–æ: {status_names.get(new_status, new_status)}"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_telegram_message_sync(user.telegram_id, message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def send_telegram_message_sync(chat_id, text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    import requests
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        response = requests.post(url, json={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        })
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
